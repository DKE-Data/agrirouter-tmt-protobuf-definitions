// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: technicalmessagetype/gps.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Agrirouter.Technicalmessagetype {

  /// <summary>Holder for reflection information generated from technicalmessagetype/gps.proto</summary>
  public static partial class GpsReflection {

    #region Descriptor
    /// <summary>File descriptor for technicalmessagetype/gps.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GpsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch50ZWNobmljYWxtZXNzYWdldHlwZS9ncHMucHJvdG8SH2Fncmlyb3V0ZXIu",
            "dGVjaG5pY2FsbWVzc2FnZXR5cGUaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3Rh",
            "bXAucHJvdG8aGWdvb2dsZS9wcm90b2J1Zi9hbnkucHJvdG8igwgKB0dQU0xp",
            "c3QSRgoLZ3BzX2VudHJpZXMYASADKAsyMS5hZ3Jpcm91dGVyLnRlY2huaWNh",
            "bG1lc3NhZ2V0eXBlLkdQU0xpc3QuR1BTRW50cnkSTQoOc291cmNlX2Rldmlj",
            "ZXMYAiADKAsyNS5hZ3Jpcm91dGVyLnRlY2huaWNhbG1lc3NhZ2V0eXBlLkdQ",
            "U0xpc3QuU291cmNlRGV2aWNlEigKCWV4dGVuc2lvbhiAECADKAsyFC5nb29n",
            "bGUucHJvdG9idWYuQW55GtUFCghHUFNFbnRyeRIWCg5wb3NpdGlvbl9ub3J0",
            "aBgBIAEoARIVCg1wb3NpdGlvbl9lYXN0GAIgASgBEhMKC3Bvc2l0aW9uX3Vw",
            "GAMgASgSElkKD3Bvc2l0aW9uX3N0YXR1cxgEIAEoDjJALmFncmlyb3V0ZXIu",
            "dGVjaG5pY2FsbWVzc2FnZXR5cGUuR1BTTGlzdC5HUFNFbnRyeS5Qb3NpdGlv",
            "blN0YXR1cxIMCgRwZG9wGAUgASgBEgwKBGhkb3AYBiABKAESHAoUbnVtYmVy",
            "X29mX3NhdGVsbGl0ZXMYByABKA0SNQoRZ3BzX3V0Y190aW1lc3RhbXAYCCAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wElMKDGZpZWxkX3N0YXR1",
            "cxgJIAEoDjI9LmFncmlyb3V0ZXIudGVjaG5pY2FsbWVzc2FnZXR5cGUuR1BT",
            "TGlzdC5HUFNFbnRyeS5GaWVsZFN0YXR1cxIbChNzb3VyY2VfZGV2aWNlX2lu",
            "ZGV4GAogASgNEigKCWV4dGVuc2lvbhiAECADKAsyFC5nb29nbGUucHJvdG9i",
            "dWYuQW55Is4BCg5Qb3NpdGlvblN0YXR1cxIMCghEX05PX0dQUxAAEgoKBkRf",
            "R05TUxABEgsKB0RfREdOU1MQAhISCg5EX1BSRUNJU0VfR05TUxADEhIKDkRf",
            "UlRLX0ZJTlRFR0VSEAQSDwoLRF9SVEtfRkxPQVQQBRIRCg1EX0VTVF9EUl9N",
            "T0RFEAYSEgoORF9NQU5VQUxfSU5QVVQQBxITCg9EX1NJTVVMQVRFX01PREUQ",
            "CBILCgdEX0VSUk9SEA4SEwoPRF9OT1RfQVZBSUxBQkxFEA8iTAoLRmllbGRT",
            "dGF0dXMSDgoKRlNfVU5LTk9XThAAEg4KCkZTX0lORklFTEQQARINCglGU19P",
            "TlJPQUQQAhIOCgpGU19PRkZST0FEEAMaXwoMU291cmNlRGV2aWNlEg0KBWlu",
            "ZGV4GAEgASgNEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRIVCg1hZ3Jpcm91dGVy",
            "X2lkGAMgASgJEhMKC2ludGVybmFsX2lkGAQgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrirouter.Technicalmessagetype.GPSList), global::Agrirouter.Technicalmessagetype.GPSList.Parser, new[]{ "GpsEntries", "SourceDevices", "Extension" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry), global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Parser, new[]{ "PositionNorth", "PositionEast", "PositionUp", "PositionStatus", "Pdop", "Hdop", "NumberOfSatellites", "GpsUtcTimestamp", "FieldStatus", "SourceDeviceIndex", "Extension" }, null, new[]{ typeof(global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus), typeof(global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice), global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice.Parser, new[]{ "Index", "DisplayName", "AgrirouterId", "InternalId" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A list of GPS Positions
  /// </summary>
  public sealed partial class GPSList : pb::IMessage<GPSList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GPSList> _parser = new pb::MessageParser<GPSList>(() => new GPSList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GPSList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agrirouter.Technicalmessagetype.GpsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPSList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPSList(GPSList other) : this() {
      gpsEntries_ = other.gpsEntries_.Clone();
      sourceDevices_ = other.sourceDevices_.Clone();
      extension_ = other.extension_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GPSList Clone() {
      return new GPSList(this);
    }

    /// <summary>Field number for the "gps_entries" field.</summary>
    public const int GpsEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry> _repeated_gpsEntries_codec
        = pb::FieldCodec.ForMessage(10, global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Parser);
    private readonly pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry> gpsEntries_ = new pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry> GpsEntries {
      get { return gpsEntries_; }
    }

    /// <summary>Field number for the "source_devices" field.</summary>
    public const int SourceDevicesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice> _repeated_sourceDevices_codec
        = pb::FieldCodec.ForMessage(18, global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice.Parser);
    private readonly pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice> sourceDevices_ = new pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Agrirouter.Technicalmessagetype.GPSList.Types.SourceDevice> SourceDevices {
      get { return sourceDevices_; }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 2048;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_extension_codec
        = pb::FieldCodec.ForMessage(16386, global::Google.Protobuf.WellKnownTypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> extension_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
    /// <summary>
    /// Used for proprietary purposes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> Extension {
      get { return extension_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GPSList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GPSList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gpsEntries_.Equals(other.gpsEntries_)) return false;
      if(!sourceDevices_.Equals(other.sourceDevices_)) return false;
      if(!extension_.Equals(other.extension_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gpsEntries_.GetHashCode();
      hash ^= sourceDevices_.GetHashCode();
      hash ^= extension_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gpsEntries_.WriteTo(output, _repeated_gpsEntries_codec);
      sourceDevices_.WriteTo(output, _repeated_sourceDevices_codec);
      extension_.WriteTo(output, _repeated_extension_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gpsEntries_.WriteTo(ref output, _repeated_gpsEntries_codec);
      sourceDevices_.WriteTo(ref output, _repeated_sourceDevices_codec);
      extension_.WriteTo(ref output, _repeated_extension_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gpsEntries_.CalculateSize(_repeated_gpsEntries_codec);
      size += sourceDevices_.CalculateSize(_repeated_sourceDevices_codec);
      size += extension_.CalculateSize(_repeated_extension_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GPSList other) {
      if (other == null) {
        return;
      }
      gpsEntries_.Add(other.gpsEntries_);
      sourceDevices_.Add(other.sourceDevices_);
      extension_.Add(other.extension_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gpsEntries_.AddEntriesFrom(input, _repeated_gpsEntries_codec);
            break;
          }
          case 18: {
            sourceDevices_.AddEntriesFrom(input, _repeated_sourceDevices_codec);
            break;
          }
          case 16386: {
            extension_.AddEntriesFrom(input, _repeated_extension_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gpsEntries_.AddEntriesFrom(ref input, _repeated_gpsEntries_codec);
            break;
          }
          case 18: {
            sourceDevices_.AddEntriesFrom(ref input, _repeated_sourceDevices_codec);
            break;
          }
          case 16386: {
            extension_.AddEntriesFrom(ref input, _repeated_extension_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the GPSList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///One single GPS Position
      /// </summary>
      public sealed partial class GPSEntry : pb::IMessage<GPSEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GPSEntry> _parser = new pb::MessageParser<GPSEntry>(() => new GPSEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GPSEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Agrirouter.Technicalmessagetype.GPSList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GPSEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GPSEntry(GPSEntry other) : this() {
          positionNorth_ = other.positionNorth_;
          positionEast_ = other.positionEast_;
          positionUp_ = other.positionUp_;
          positionStatus_ = other.positionStatus_;
          pdop_ = other.pdop_;
          hdop_ = other.hdop_;
          numberOfSatellites_ = other.numberOfSatellites_;
          gpsUtcTimestamp_ = other.gpsUtcTimestamp_ != null ? other.gpsUtcTimestamp_.Clone() : null;
          fieldStatus_ = other.fieldStatus_;
          sourceDeviceIndex_ = other.sourceDeviceIndex_;
          extension_ = other.extension_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GPSEntry Clone() {
          return new GPSEntry(this);
        }

        /// <summary>Field number for the "position_north" field.</summary>
        public const int PositionNorthFieldNumber = 1;
        private double positionNorth_;
        /// <summary>
        ///Latitude
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PositionNorth {
          get { return positionNorth_; }
          set {
            positionNorth_ = value;
          }
        }

        /// <summary>Field number for the "position_east" field.</summary>
        public const int PositionEastFieldNumber = 2;
        private double positionEast_;
        /// <summary>
        ///Longitude
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double PositionEast {
          get { return positionEast_; }
          set {
            positionEast_ = value;
          }
        }

        /// <summary>Field number for the "position_up" field.</summary>
        public const int PositionUpFieldNumber = 3;
        private long positionUp_;
        /// <summary>
        ///Altitude
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long PositionUp {
          get { return positionUp_; }
          set {
            positionUp_ = value;
          }
        }

        /// <summary>Field number for the "position_status" field.</summary>
        public const int PositionStatusFieldNumber = 4;
        private global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus positionStatus_ = global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus PositionStatus {
          get { return positionStatus_; }
          set {
            positionStatus_ = value;
          }
        }

        /// <summary>Field number for the "pdop" field.</summary>
        public const int PdopFieldNumber = 5;
        private double pdop_;
        /// <summary>
        ///Position DOP (Dilusion of precision)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Pdop {
          get { return pdop_; }
          set {
            pdop_ = value;
          }
        }

        /// <summary>Field number for the "hdop" field.</summary>
        public const int HdopFieldNumber = 6;
        private double hdop_;
        /// <summary>
        ///Horizontal DOP (Dilusion of precision) 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Hdop {
          get { return hdop_; }
          set {
            hdop_ = value;
          }
        }

        /// <summary>Field number for the "number_of_satellites" field.</summary>
        public const int NumberOfSatellitesFieldNumber = 7;
        private uint numberOfSatellites_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint NumberOfSatellites {
          get { return numberOfSatellites_; }
          set {
            numberOfSatellites_ = value;
          }
        }

        /// <summary>Field number for the "gps_utc_timestamp" field.</summary>
        public const int GpsUtcTimestampFieldNumber = 8;
        private global::Google.Protobuf.WellKnownTypes.Timestamp gpsUtcTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp GpsUtcTimestamp {
          get { return gpsUtcTimestamp_; }
          set {
            gpsUtcTimestamp_ = value;
          }
        }

        /// <summary>Field number for the "field_status" field.</summary>
        public const int FieldStatusFieldNumber = 9;
        private global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus fieldStatus_ = global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown;
        /// <summary>
        ///Are we on a road, in a field or just somewhere offroad?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus FieldStatus {
          get { return fieldStatus_; }
          set {
            fieldStatus_ = value;
          }
        }

        /// <summary>Field number for the "source_device_index" field.</summary>
        public const int SourceDeviceIndexFieldNumber = 10;
        private uint sourceDeviceIndex_;
        /// <summary>
        ///The index of the source device in the SourceDeviceList
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SourceDeviceIndex {
          get { return sourceDeviceIndex_; }
          set {
            sourceDeviceIndex_ = value;
          }
        }

        /// <summary>Field number for the "extension" field.</summary>
        public const int ExtensionFieldNumber = 2048;
        private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_extension_codec
            = pb::FieldCodec.ForMessage(16386, global::Google.Protobuf.WellKnownTypes.Any.Parser);
        private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> extension_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
        /// <summary>
        /// Used for proprietary purposes
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> Extension {
          get { return extension_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GPSEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GPSEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionNorth, other.PositionNorth)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PositionEast, other.PositionEast)) return false;
          if (PositionUp != other.PositionUp) return false;
          if (PositionStatus != other.PositionStatus) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pdop, other.Pdop)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Hdop, other.Hdop)) return false;
          if (NumberOfSatellites != other.NumberOfSatellites) return false;
          if (!object.Equals(GpsUtcTimestamp, other.GpsUtcTimestamp)) return false;
          if (FieldStatus != other.FieldStatus) return false;
          if (SourceDeviceIndex != other.SourceDeviceIndex) return false;
          if(!extension_.Equals(other.extension_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PositionNorth != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionNorth);
          if (PositionEast != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PositionEast);
          if (PositionUp != 0L) hash ^= PositionUp.GetHashCode();
          if (PositionStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps) hash ^= PositionStatus.GetHashCode();
          if (Pdop != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pdop);
          if (Hdop != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Hdop);
          if (NumberOfSatellites != 0) hash ^= NumberOfSatellites.GetHashCode();
          if (gpsUtcTimestamp_ != null) hash ^= GpsUtcTimestamp.GetHashCode();
          if (FieldStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown) hash ^= FieldStatus.GetHashCode();
          if (SourceDeviceIndex != 0) hash ^= SourceDeviceIndex.GetHashCode();
          hash ^= extension_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (PositionNorth != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PositionNorth);
          }
          if (PositionEast != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(PositionEast);
          }
          if (PositionUp != 0L) {
            output.WriteRawTag(24);
            output.WriteSInt64(PositionUp);
          }
          if (PositionStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps) {
            output.WriteRawTag(32);
            output.WriteEnum((int) PositionStatus);
          }
          if (Pdop != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Pdop);
          }
          if (Hdop != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Hdop);
          }
          if (NumberOfSatellites != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(NumberOfSatellites);
          }
          if (gpsUtcTimestamp_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(GpsUtcTimestamp);
          }
          if (FieldStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown) {
            output.WriteRawTag(72);
            output.WriteEnum((int) FieldStatus);
          }
          if (SourceDeviceIndex != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(SourceDeviceIndex);
          }
          extension_.WriteTo(output, _repeated_extension_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (PositionNorth != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(PositionNorth);
          }
          if (PositionEast != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(PositionEast);
          }
          if (PositionUp != 0L) {
            output.WriteRawTag(24);
            output.WriteSInt64(PositionUp);
          }
          if (PositionStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps) {
            output.WriteRawTag(32);
            output.WriteEnum((int) PositionStatus);
          }
          if (Pdop != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Pdop);
          }
          if (Hdop != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Hdop);
          }
          if (NumberOfSatellites != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(NumberOfSatellites);
          }
          if (gpsUtcTimestamp_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(GpsUtcTimestamp);
          }
          if (FieldStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown) {
            output.WriteRawTag(72);
            output.WriteEnum((int) FieldStatus);
          }
          if (SourceDeviceIndex != 0) {
            output.WriteRawTag(80);
            output.WriteUInt32(SourceDeviceIndex);
          }
          extension_.WriteTo(ref output, _repeated_extension_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PositionNorth != 0D) {
            size += 1 + 8;
          }
          if (PositionEast != 0D) {
            size += 1 + 8;
          }
          if (PositionUp != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PositionUp);
          }
          if (PositionStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PositionStatus);
          }
          if (Pdop != 0D) {
            size += 1 + 8;
          }
          if (Hdop != 0D) {
            size += 1 + 8;
          }
          if (NumberOfSatellites != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfSatellites);
          }
          if (gpsUtcTimestamp_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsUtcTimestamp);
          }
          if (FieldStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FieldStatus);
          }
          if (SourceDeviceIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceDeviceIndex);
          }
          size += extension_.CalculateSize(_repeated_extension_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GPSEntry other) {
          if (other == null) {
            return;
          }
          if (other.PositionNorth != 0D) {
            PositionNorth = other.PositionNorth;
          }
          if (other.PositionEast != 0D) {
            PositionEast = other.PositionEast;
          }
          if (other.PositionUp != 0L) {
            PositionUp = other.PositionUp;
          }
          if (other.PositionStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus.DNoGps) {
            PositionStatus = other.PositionStatus;
          }
          if (other.Pdop != 0D) {
            Pdop = other.Pdop;
          }
          if (other.Hdop != 0D) {
            Hdop = other.Hdop;
          }
          if (other.NumberOfSatellites != 0) {
            NumberOfSatellites = other.NumberOfSatellites;
          }
          if (other.gpsUtcTimestamp_ != null) {
            if (gpsUtcTimestamp_ == null) {
              GpsUtcTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            GpsUtcTimestamp.MergeFrom(other.GpsUtcTimestamp);
          }
          if (other.FieldStatus != global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus.FsUnknown) {
            FieldStatus = other.FieldStatus;
          }
          if (other.SourceDeviceIndex != 0) {
            SourceDeviceIndex = other.SourceDeviceIndex;
          }
          extension_.Add(other.extension_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                PositionNorth = input.ReadDouble();
                break;
              }
              case 17: {
                PositionEast = input.ReadDouble();
                break;
              }
              case 24: {
                PositionUp = input.ReadSInt64();
                break;
              }
              case 32: {
                PositionStatus = (global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus) input.ReadEnum();
                break;
              }
              case 41: {
                Pdop = input.ReadDouble();
                break;
              }
              case 49: {
                Hdop = input.ReadDouble();
                break;
              }
              case 56: {
                NumberOfSatellites = input.ReadUInt32();
                break;
              }
              case 66: {
                if (gpsUtcTimestamp_ == null) {
                  GpsUtcTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(GpsUtcTimestamp);
                break;
              }
              case 72: {
                FieldStatus = (global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus) input.ReadEnum();
                break;
              }
              case 80: {
                SourceDeviceIndex = input.ReadUInt32();
                break;
              }
              case 16386: {
                extension_.AddEntriesFrom(input, _repeated_extension_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                PositionNorth = input.ReadDouble();
                break;
              }
              case 17: {
                PositionEast = input.ReadDouble();
                break;
              }
              case 24: {
                PositionUp = input.ReadSInt64();
                break;
              }
              case 32: {
                PositionStatus = (global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.PositionStatus) input.ReadEnum();
                break;
              }
              case 41: {
                Pdop = input.ReadDouble();
                break;
              }
              case 49: {
                Hdop = input.ReadDouble();
                break;
              }
              case 56: {
                NumberOfSatellites = input.ReadUInt32();
                break;
              }
              case 66: {
                if (gpsUtcTimestamp_ == null) {
                  GpsUtcTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(GpsUtcTimestamp);
                break;
              }
              case 72: {
                FieldStatus = (global::Agrirouter.Technicalmessagetype.GPSList.Types.GPSEntry.Types.FieldStatus) input.ReadEnum();
                break;
              }
              case 80: {
                SourceDeviceIndex = input.ReadUInt32();
                break;
              }
              case 16386: {
                extension_.AddEntriesFrom(ref input, _repeated_extension_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the GPSEntry message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum PositionStatus {
            /// <summary>
            ///No GPS at all
            /// </summary>
            [pbr::OriginalName("D_NO_GPS")] DNoGps = 0,
            /// <summary>
            ///Low level GPS
            /// </summary>
            [pbr::OriginalName("D_GNSS")] DGnss = 1,
            /// <summary>
            ///Medium level GPS
            /// </summary>
            [pbr::OriginalName("D_DGNSS")] DDgnss = 2,
            /// <summary>
            ///High level GPS Without correction signal
            /// </summary>
            [pbr::OriginalName("D_PRECISE_GNSS")] DPreciseGnss = 3,
            /// <summary>
            ///High level GPS with correction signal; 
            /// </summary>
            [pbr::OriginalName("D_RTK_FINTEGER")] DRtkFinteger = 4,
            /// <summary>
            ///High level GPS with correction signal in high precision;
            /// </summary>
            [pbr::OriginalName("D_RTK_FLOAT")] DRtkFloat = 5,
            /// <summary>
            ///EST-Mode
            /// </summary>
            [pbr::OriginalName("D_EST_DR_MODE")] DEstDrMode = 6,
            [pbr::OriginalName("D_MANUAL_INPUT")] DManualInput = 7,
            [pbr::OriginalName("D_SIMULATE_MODE")] DSimulateMode = 8,
            /// <summary>
            /// 9-13 Reserved
            /// </summary>
            [pbr::OriginalName("D_ERROR")] DError = 14,
            /// <summary>
            ///No GPS Receiver available
            /// </summary>
            [pbr::OriginalName("D_NOT_AVAILABLE")] DNotAvailable = 15,
          }

          public enum FieldStatus {
            [pbr::OriginalName("FS_UNKNOWN")] FsUnknown = 0,
            [pbr::OriginalName("FS_INFIELD")] FsInfield = 1,
            [pbr::OriginalName("FS_ONROAD")] FsOnroad = 2,
            [pbr::OriginalName("FS_OFFROAD")] FsOffroad = 3,
          }

        }
        #endregion

      }

      public sealed partial class SourceDevice : pb::IMessage<SourceDevice>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SourceDevice> _parser = new pb::MessageParser<SourceDevice>(() => new SourceDevice());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SourceDevice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Agrirouter.Technicalmessagetype.GPSList.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceDevice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceDevice(SourceDevice other) : this() {
          index_ = other.index_;
          displayName_ = other.displayName_;
          agrirouterId_ = other.agrirouterId_;
          internalId_ = other.internalId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceDevice Clone() {
          return new SourceDevice(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private uint index_;
        /// <summary>
        ///The index within the list of SourceDevices; Not necessarilly all values are there
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "display_name" field.</summary>
        public const int DisplayNameFieldNumber = 2;
        private string displayName_ = "";
        /// <summary>
        ///Proprietary name for displaying (might change during operation)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DisplayName {
          get { return displayName_; }
          set {
            displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "agrirouter_id" field.</summary>
        public const int AgrirouterIdFieldNumber = 3;
        private string agrirouterId_ = "";
        /// <summary>
        ///The endpoint_id as mentioned in the ListEndpoints Result
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AgrirouterId {
          get { return agrirouterId_; }
          set {
            agrirouterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "internal_id" field.</summary>
        public const int InternalIdFieldNumber = 4;
        private string internalId_ = "";
        /// <summary>
        ///A proprietary but static id for sources outside of agrirouter
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string InternalId {
          get { return internalId_; }
          set {
            internalId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SourceDevice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SourceDevice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (DisplayName != other.DisplayName) return false;
          if (AgrirouterId != other.AgrirouterId) return false;
          if (InternalId != other.InternalId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
          if (AgrirouterId.Length != 0) hash ^= AgrirouterId.GetHashCode();
          if (InternalId.Length != 0) hash ^= InternalId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (DisplayName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DisplayName);
          }
          if (AgrirouterId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AgrirouterId);
          }
          if (InternalId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(InternalId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Index);
          }
          if (DisplayName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(DisplayName);
          }
          if (AgrirouterId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AgrirouterId);
          }
          if (InternalId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(InternalId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
          }
          if (DisplayName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
          }
          if (AgrirouterId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AgrirouterId);
          }
          if (InternalId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SourceDevice other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.DisplayName.Length != 0) {
            DisplayName = other.DisplayName;
          }
          if (other.AgrirouterId.Length != 0) {
            AgrirouterId = other.AgrirouterId;
          }
          if (other.InternalId.Length != 0) {
            InternalId = other.InternalId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 18: {
                DisplayName = input.ReadString();
                break;
              }
              case 26: {
                AgrirouterId = input.ReadString();
                break;
              }
              case 34: {
                InternalId = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Index = input.ReadUInt32();
                break;
              }
              case 18: {
                DisplayName = input.ReadString();
                break;
              }
              case 26: {
                AgrirouterId = input.ReadString();
                break;
              }
              case 34: {
                InternalId = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
